// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/IBM-Cloud/bluemix-go/models"
	vpcv1 "github.com/IBM/vpc-go-sdk/vpcv1"
	gomock "github.com/golang/mock/gomock"
	ibmcloud "github.com/openshift/installer/pkg/types/ibmcloud"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetCISInstance mocks base method
func (m *MockAPI) GetCISInstance(ctx context.Context, crnstr string) (*models.ServiceInstanceV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCISInstance", ctx, crnstr)
	ret0, _ := ret[0].(*models.ServiceInstanceV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCISInstance indicates an expected call of GetCISInstance
func (mr *MockAPIMockRecorder) GetCISInstance(ctx, crnstr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCISInstance", reflect.TypeOf((*MockAPI)(nil).GetCISInstance), ctx, crnstr)
}

// GetCustomImageByName mocks base method
func (m *MockAPI) GetCustomImageByName(ctx context.Context, imageName, region string) (*vpcv1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomImageByName", ctx, imageName, region)
	ret0, _ := ret[0].(*vpcv1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomImageByName indicates an expected call of GetCustomImageByName
func (mr *MockAPIMockRecorder) GetCustomImageByName(ctx, imageName, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomImageByName", reflect.TypeOf((*MockAPI)(nil).GetCustomImageByName), ctx, imageName, region)
}

// GetCustomImages mocks base method
func (m *MockAPI) GetCustomImages(ctx context.Context, region string) ([]vpcv1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomImages", ctx, region)
	ret0, _ := ret[0].([]vpcv1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomImages indicates an expected call of GetCustomImages
func (mr *MockAPIMockRecorder) GetCustomImages(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomImages", reflect.TypeOf((*MockAPI)(nil).GetCustomImages), ctx, region)
}

// GetDNSZones mocks base method
func (m *MockAPI) GetDNSZones(ctx context.Context) ([]ibmcloud.DNSZoneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSZones", ctx)
	ret0, _ := ret[0].([]ibmcloud.DNSZoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSZones indicates an expected call of GetDNSZones
func (mr *MockAPIMockRecorder) GetDNSZones(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSZones", reflect.TypeOf((*MockAPI)(nil).GetDNSZones), ctx)
}

// GetEncryptionKey mocks base method
func (m *MockAPI) GetEncryptionKey(ctx context.Context, keyCRN string) (*ibmcloud.EncryptionKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionKey", ctx, keyCRN)
	ret0, _ := ret[0].(*ibmcloud.EncryptionKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionKey indicates an expected call of GetEncryptionKey
func (mr *MockAPIMockRecorder) GetEncryptionKey(ctx, keyCRN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionKey", reflect.TypeOf((*MockAPI)(nil).GetEncryptionKey), ctx, keyCRN)
}

// GetResourceGroups mocks base method
func (m *MockAPI) GetResourceGroups(ctx context.Context) ([]models.ResourceGroupv2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroups", ctx)
	ret0, _ := ret[0].([]models.ResourceGroupv2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroups indicates an expected call of GetResourceGroups
func (mr *MockAPIMockRecorder) GetResourceGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroups", reflect.TypeOf((*MockAPI)(nil).GetResourceGroups), ctx)
}

// GetResourceGroup mocks base method
func (m *MockAPI) GetResourceGroup(ctx context.Context, nameOrID string) (*models.ResourceGroupv2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroup", ctx, nameOrID)
	ret0, _ := ret[0].(*models.ResourceGroupv2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroup indicates an expected call of GetResourceGroup
func (mr *MockAPIMockRecorder) GetResourceGroup(ctx, nameOrID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroup", reflect.TypeOf((*MockAPI)(nil).GetResourceGroup), ctx, nameOrID)
}

// GetSubnet mocks base method
func (m *MockAPI) GetSubnet(ctx context.Context, subnetID string) (*vpcv1.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", ctx, subnetID)
	ret0, _ := ret[0].(*vpcv1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet
func (mr *MockAPIMockRecorder) GetSubnet(ctx, subnetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockAPI)(nil).GetSubnet), ctx, subnetID)
}

// GetVSIProfiles mocks base method
func (m *MockAPI) GetVSIProfiles(ctx context.Context) ([]vpcv1.InstanceProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVSIProfiles", ctx)
	ret0, _ := ret[0].([]vpcv1.InstanceProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVSIProfiles indicates an expected call of GetVSIProfiles
func (mr *MockAPIMockRecorder) GetVSIProfiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVSIProfiles", reflect.TypeOf((*MockAPI)(nil).GetVSIProfiles), ctx)
}

// GetVPC mocks base method
func (m *MockAPI) GetVPC(ctx context.Context, vpcID string) (*vpcv1.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPC", ctx, vpcID)
	ret0, _ := ret[0].(*vpcv1.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPC indicates an expected call of GetVPC
func (mr *MockAPIMockRecorder) GetVPC(ctx, vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPC", reflect.TypeOf((*MockAPI)(nil).GetVPC), ctx, vpcID)
}

// GetVPCZonesForRegion mocks base method
func (m *MockAPI) GetVPCZonesForRegion(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVPCZonesForRegion", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVPCZonesForRegion indicates an expected call of GetVPCZonesForRegion
func (mr *MockAPIMockRecorder) GetVPCZonesForRegion(ctx, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVPCZonesForRegion", reflect.TypeOf((*MockAPI)(nil).GetVPCZonesForRegion), ctx, region)
}

// GetZoneIDByName mocks base method
func (m *MockAPI) GetZoneIDByName(ctx context.Context, crn, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneIDByName", ctx, crn, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneIDByName indicates an expected call of GetZoneIDByName
func (mr *MockAPIMockRecorder) GetZoneIDByName(ctx, crn, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneIDByName", reflect.TypeOf((*MockAPI)(nil).GetZoneIDByName), ctx, crn, name)
}
